<table id="task-table" class="ui compact definition celled table">
  <thead class="full-width">
    <tr>
      <th class="header-command"></th>
      <th class="header-no">No</th>
      <th class="header-description">Description</th>
      <th class="header-status">Status</th>
      <th class="header-owner">Owner</th>
      <th class="header-priority">Priority</th>
      <th class="header-estimate">Estimate</th>
      <th class="header-remain">Remain</th>
    </tr>
  </thead>
  <tbody data-bind="template: { name: 'task-template', foreach: tasks }">
  </tbody>
  <tfoot>
    <tr>
      <th></th>
      <th colspan="7">
        <div class="ui segment">
          <form class="ui mini form" data-bind="submit: handleSubmitNewTask">
            <button class="ui mini button" type="submit">Add Task</button>
            <div class="fields">
              <div class="ten wide field">
                <label>Description</label>
                <input type="text" name="description" placeholder="Task Description">
              </div>
              <div class="two wide field">
                <label>Owner</label>
                <input type="text" name="owner" placeholder="Owner">
              </div>
              <div class="one wide field">
                <label>Priority</label>
                <input type="text" name="priority" placeholder="Priority">
              </div>
              <div class="one wide field">
                <label>Estimate</label>
                <input type="text" name="estimate" placeholder="Estimate">
              </div>
            </div>
          </form>
        </div>
      </th>
    </tr>
  </tfoot>
</table>
<div id="drop-indicator"></div>

<%# タスク描画用のテンプレート %>
<script type="text/html" id="task-template">
<tr data-bind="event: { dragstart: function(d,e){return $root.handleTaskDragStart(d,e,$index())},
                        dragend:   function(d,e){return $root.handleTaskDragEnd(d,e,$index())},
                        dragenter: function(d,e){return $root.handleTaskDragEnter(d,e,$index())},
                        dragleave: function(d,e){return $root.handleTaskDragLeave(d,e,$index())},
                        drop:      function(d,e){return $root.handleTaskDrop(d,e,$index())},
                        dragover:  function(){return false} }" draggable="true">
  <td>
    <i class="edit icon"></i>
  </td>
  <td data-bind="text: id"></td>
  <td data-bind="style: { 'padding-left': level * 2 + 'em' }"><span data-bind="text: description, css: { 'body-description-with-level': level > 0 }"></span></td>
  <td data-bidd="text: status"></td>
  <td data-bind="text: owner"></td>
  <td data-bind="text: priority"></td>
  <td data-bind="text: estimate"></td>
  <td data-bind="text: remain"></td>
</tr>
</script>

<script type="application/javascript">
$(function() {

  var TasksViewModel = function() {
    var self = this;

    //
    // !Precached DOMs
    //
    this.$dropIndicator = $('#drop-indicator');
    this.$taskTable = $('#task-table');

    //
    // !Event handlers
    //

    // ドラッグスタート時に呼ばれる
    this.handleTaskDragStart = function(task, e, idx) {
      e.originalEvent.dataTransfer.effectAllowed = 'move';
      e.originalEvent.dataTransfer.setData('text/plain', JSON.stringify({id: task.id, idx: idx}));
      $(e.target).addClass('on-dragged');
      self.$dropIndicator.css({width: self.$taskTable.width()});
      return true;
    };

    // ドラッグ終了時に呼ばれる
    this.handleTaskDragEnd = function(task, e, idx) {
      $(e.target).removeClass('on-dragged');
    };

    this.handleTaskDragEnter = function(task, e, idx) {
      var rect = $(e.target).closest('tr').get(0).getBoundingClientRect();
      self.$dropIndicator.css({top: rect.top}).show();
    };

    this.handleTaskDragLeave = function(task, e, idx) {
    };

    // ドロップ完了時に呼ばれる
    this.handleTaskDrop = function(tgtTask, e, tgtIdx) {
      self.$dropIndicator.hide();
      var tasks = self.tasks();
      var srcInfo = JSON.parse(e.originalEvent.dataTransfer.getData('text/plain'));
      var srcIdx = srcInfo.idx;
      var srcTask = tasks[srcIdx];

      if (tgtTask.id == srcTask.id) {
        return; // src equals tgt, do nothing.
      }

      // tgtTaskのpreviousが変わる
      tgtTask.previous = srcTask.id;
      self.willUpdateTask(tgtTask);

      return false;
    };

    this.handleSubmitNewTask = function(formElem) {
      var $formElem = $(formElem);
      var desc = $formElem.find('input[name="description"]').val();
      var owner = $formElem.find('input[name="owner"]').val();
      var estimate = $formElem.find('input[name="estimate"]').val();
      var task = {};
      task.description = desc;
      task.owner = owner;
      self.willCreateTask(task).then(function() {
        Scumizu.log('created');
      });
    };

    //
    // !Logic methods
    //

    // 新規タスク作成、Promiseをかえす
    this.willCreateTask = function(task) {
      return Scumizu.willPostJson('/task', task).then(function(t) {
        self.tasks.push(t);
      });
    };

    // タスク更新、Promiseをかえす
    this.willUpdateTask = function(task) {
      return Scumizu.willPatchJson('/task', task).then(function(t) {
        self.tasks()[self.tasks.indexOf(task)] = t;
      });
    };

    // 新しいタスクの設定
    this.alterTasks = function(newTasks) {
      var addedTaskIds = [];
      var tasks = [];
      for (var i = 0; i < newTasks.length; i++) {
        var task = newTasks[i];
        var taskIdx = i;

        // タスク追加
        if (!addedTaskIds.includes(task.id)) {
          tasks.push(task);
          addedTaskIds.push(task.id);
        }

        // 前のタスク追加
      }

      self.tasks(tasks);
    };

    //
    // !Models
    //
    this.tasks = ko.observableArray([]);
  };

  var tasksViewModel = new TasksViewModel();
  ko.applyBindings(tasksViewModel, document.getElementById('task-table'));
  Scumizu.vm.tasks = tasksViewModel;

  // タスクのロードを開始する
  Scumizu.startTasksView = function(opts) {
    /* var path = opts.path || '/task';*/
    サーバーサイドからタスクをロードする
    Scumizu.willGetJson(path).then(function(data) {
      tasksViewModel.alterTasks(data);
    });
  };
});
</script>
